#summary MQRPC Tutorial

= MQRPC Tutorial =

<wiki:toc max_depth="3" />

= Intro =

Let's start with a RPC example: Summing up numbers.

These examples use the [http://www.rabbitmq.com/examples.html#demo-server RabbitMQ demo server], so you don't need to have an AMQP server running yourself. Though, if you have one already, feel free to change the hosts used in the examples.

You'll need mqrpc: https://rubyforge.org/frs/download.php/66667/mqrpc-0.0.1.gem

== Make your message ==

Messages are generic. For a real RPC system you'll want the function call (a Request) and the function return (a Response).

=== The Add Messages ===
Here's an example of a "Add" request. For demonstrative purposes, we'll give the request an argument called 'numbers' which will store an array of numbers into. Put the following in a file called 'add_message.rb':

{{{
require 'mqrpc'

class AddRequest < MQRPC::RequestMessage
  argument :numbers
end

class AddResponse < MQRPC::ResponseMessage
  argument :sum
end
}}}

We've now created two messages. 

=== The Server ===

{{{
require 'mqrpc'
require 'add_message'

class Adder < MQRPC::Agent

  # Defining '<thing>Handler' autoregisters your class's support for that message
  # So having the method below means we can handle AddRequest messages.
  def AddRequestHandler(request)
    puts "Got #{request.class.name} for #{request.numbers.inspect}"
    # The 'request.numbers' method comes from our declaration above
    # that 'numbers' was an argument to the AddRequest.
    sum = request.numbers.reduce { |a,b| a + b }

    # Make the response
    response = AddResponse.new(request)
    # The 'response.sum' comes from AddResponse declaring a 'sum' argument.
    response.sum = sum
    yield response
  end # def AddRequestHandler

  def run
    # listen for messages on the 'adder' queue
    subscribe("adder")
    super
  end
end # class Adder < MQRPC::Agent

config = MQRPC::Config.new({ "mqhost" => "dev.rabbitmq.com" })
adder = Adder.new(config)
adder.run
}}}

=== The Client ===

Now let's create the client.

{{{
require 'mqrpc'
require 'add_message'

class AdderClient < MQRPC::Agent
  def run
    request = AddRequest.new
    request.numbers = [10, 20, 30, 40]

    # send our request to the 'adder' queue
    # and run the given block for the response
    sendmsg("adder", request) do |msg|
      puts "Got result: #{msg.sum}"

      # Say we're done.
      close
    end

    # Run the agent 'run' method, which is our main method.
    super
  end # def
end # class AdderClient < MQRPC::Agent

config = MQRPC::Config.new({ "mqhost" => "dev.rabbitmq.com" })
adder = AdderClient.new(config)
adder.run
}}}

=== Running it ===

{{{
# server                               |    # client
% ruby add_server.rb                   |    % ruby add_client.rb
Got AddRequest for [10, 20, 30, 40]    |    Got result: 100
}}}

== Multiple asynchronous messages - Adder Client ==

What if you want to send a bunch of requests in parallel? The agent's sendmsg function, if given a block, will return a MQRPC::Operation object which you can use to synchronously wait on. If you store a bunch of these, then wait all at once, you get parallelism.

{{{
require 'mqrpc'
require 'add_message'

class AdderClient < MQRPC::Agent
  def run
    Thread.new { myrunner }
    super
  end # def

  def myrunner
    operations = []
    0.upto(20) do |i|
      request = AddRequest.new
      request.numbers = [rand, rand, rand, rand]
      op = sendmsg("adder", request) do |msg|
        puts "Got result: #{msg.sum}"
      end
      operations << op
    end

    # Now that we've fired all the operations, wait for them all
    # to finish.
    puts "Waiting on all operations..."
    operations.each do |op|
      op.wait_until_finished
    end

    # Close up.
    close
  end
end # class AdderClient < MQRPC::Agent

config = MQRPC::Config.new({ "mqhost" => "dev.rabbitmq.com" })
adder = AdderClient.new(config)
adder.run
}}}

=== Multimessage adder output ===

{{{
% ruby add_client_multirequest.rb
Waiting on all operations...
Got result: 2.62770229058272
Got result: 1.09610144196618
Got result: 2.0294984932482
Got result: 1.95208399584649
Got result: 2.24899496968425
Got result: 1.63678501613125
Got result: 2.83627181546618
Got result: 1.28504326542031
Got result: 2.46139400655061
Got result: 1.6891112999231
Got result: 1.77054311419554
Got result: 1.29082175770879
Got result: 2.0580156627521
Got result: 2.00039160891542
Got result: 2.46367543583985
Got result: 1.80061435828529
Got result: 2.04349472371222
Got result: 2.45506359906596
Got result: 2.21414242920973
Got result: 1.84999467133767
Got result: 1.69721803551371
}}}