#summary logstash configuration

<wiki:toc max_depth="1" />

= Introduction =

= Inputs =

== file ==

Example: file:///var/log/*.log

File input. Uses 'eventmachine-tail' to tail the files. It will follow files
and react properly when files are truncated, rotated, or renamed. It also
supports globs, so if your application logs to an unpredictable filename (for
example, if it includes a timestamp or date), you can just include globs.

Currently, events are determined as file data delimited by a newline.

Multiline logs will be supported later. If you want this sooner, email the mailing list :)

== AMQP ==

Like the AMQP output

= Filters =


= Outputs =

== AMQP ==

Example: amqp://server:port/fanout/somequeue

AMQP output sends events to an AMQP message broker. You have 3 choices of
message queues: topic, fanout, or queue. A topic is a pubsub broadcast-type of
messaging. Fanout is  round-robin messaging. A queue is 1:1 messaging.

Example servers that support AMQP include: RabbitMQ, ActiveMQ, QPid.

AMQP is a great way to send events around from input collectors (file inputs)
to event indexers (elasticsearch output).

== stdout ==

Example: stdout:///

stdout is useful for outputting events you receive if you need to debug events
or want to use an agent that streams events from other inputs (files, amqp,
etc)

== ElasticSearch ==

Example: elasticsearch://server:port/logstash/events

ElasticSearch is the best way to store your logstash events for later searching.

Using the example url above will use the REST API supported by ElasticSearch.
This is an easy start to using ElasticSearch, but doesn't scale beyond a few
thousand qps (mostly due to current code features in logstash and use of
em-http-request).

=== Scaling ElasticSearch ===

If you want to scale better, you should use elasticsearch "river". This tells
elasticsearch to read indexing inputs from an AMQP message queue and should
scale better than the REST API. To use this, you should use something like this
as your output:

To use this river, you'll have to install the rabbitmq-river plugin for
elasticsearch. This is easy; from the elasticsearch install directory, run:

{{{
bin/plugin -install river-rabbitmq
}}}

It's called 'river-rabbitmq' but I'm pretty sure it is AMQP not specific to
rabbitmq.

Example URL:
elasticsearch://localhost:9200/logstash/events?method=river&type=rabbitmq&host=AMQPHOST&user=guest&pass=guest&vhost=/&queue=es

The url parameters are pretty straight forward, the ones you care about are:
  * host - the hostname of the AMQP broker
  * user - the amqp user
  * pass - the amqp password
  * vhost - the amqp vhost (if you don't know what this is, use '/')
  * queue - the queue to write to

== MongoDB ==

Example: mongodb://mongodbhost/dbname

This will write events to mongodb.
